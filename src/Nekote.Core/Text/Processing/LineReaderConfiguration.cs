namespace Nekote.Core.Text.Processing
{
    /// <summary>
    /// 行読み取り処理の設定を定義する列挙型。各設定は異なる行処理戦略を提供し、
    /// 用途に応じて適切な空行処理、空白文字処理、および行プロセッサーを選択する。
    /// </summary>
    public enum LineReaderConfiguration
    {
        /// <summary>
        /// 標準的な行処理設定。一般的なテキスト処理に適している。
        /// - LineProcessor.Default を使用（適度な空白文字正規化）
        /// - 空行定義: IsWhitespace（空白文字のみの行も空行として扱う）
        /// - 先頭空行: 無視
        /// - 中間空行: 1行に集約
        /// - 末尾空行: 無視
        /// バランスの取れた処理で、多くの用途に適用可能。
        /// </summary>
        Default,

        /// <summary>
        /// 積極的な行処理設定。匿名ユーザー入力（Webフォームなど）に適している。
        /// 長い空白文字シーケンスやインデント、インライン空白が悪意のある目的で
        /// 使用される可能性がある場合に有効。
        /// - LineProcessor.Aggressive を使用（強力な空白文字正規化と除去）
        /// - 空行定義: IsWhitespace（空白文字のみの行も空行として扱う）
        /// - 先頭空行: 無視
        /// - 中間空行: 1行に集約
        /// - 末尾空行: 無視
        /// セキュリティを重視した処理で、不正な空白文字の悪用を防ぐ。
        /// </summary>
        Aggressive,

        /// <summary>
        /// パススルー処理設定。主にテスト・デモンストレーション目的で使用。
        /// 入力テキストをほぼそのまま保持し、最小限の処理のみを行う。
        /// - LineProcessor.Passthrough を使用（空白文字処理なし）
        /// - 空行定義: IsEmptyString（完全に空の行のみを空行として扱う）
        /// - 先頭空行: 保持
        /// - 中間空行: 保持
        /// - 末尾空行: 保持
        /// 元のテキスト構造を可能な限り維持する。
        /// </summary>
        Passthrough,
    }
}
